{"remainingRequest":"/Users/user/Desktop/form/node_modules/thread-loader/dist/cjs.js!/Users/user/Desktop/form/node_modules/babel-loader/lib/index.js!/Users/user/Desktop/form/node_modules/eslint-loader/index.js??ref--13-0!/Users/user/Desktop/form/src/helpers/discourse.js","dependencies":[{"path":"/Users/user/Desktop/form/src/helpers/discourse.js","mtime":1597767332729},{"path":"/Users/user/Desktop/form/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Desktop/form/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Desktop/form/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/user/Desktop/form/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport generatePassword from 'secure-random-string';\nvar errorMessages = {\n  \"networkError\": \"Sorry, we were unable to store your response due to a network connectivity issue. Please try clicking on \\\"Send\\\" again.\",\n  \"username\": \"It seems somebody has already chosen your preferred username / nickname. Please enter a different one and click again on \\\"Send\\\".\",\n  \"email\": \"It seems you already have an account on our forum using this e-mail address, or have entered an invalid address. Please choose a different e-mail address and click again on \\\"Send\\\".\",\n  \"default\": \"Sorry, we were unable to store your response due to an unknown error. Please try clicking on \\\"Send\\\" again.\"\n};\n\nvar createUser = function createUser(form, authKey, messages) {\n  return fetch(\"\".concat(process.env.VUE_APP_DISCOURSE_USER_URL, \"?\").concat(Object.entries({\n    accepted_gtc: true,\n    accepted_privacy_policy: true,\n    edgeryders_research_consent: true,\n    requested_api_keys: [process.env.VUE_APP_DISCOURSE_DOMAIN],\n    auth_key: authKey,\n    email: form.account.email,\n    username: form.account.username,\n    password: createPassword(form)\n  }).map(function (pair) {\n    return pair.map(encodeURIComponent).join('=');\n  }).join('&'))).then(handleResponse(errorMessages), handleNetworkError(errorMessages));\n};\n\nfunction createPassword(form) {\n  if (form.account.password !== '') {\n    return form.account.password;\n  } else {\n    var password = generatePassword({\n      length: 15\n    }); // window.console.log(password);\n\n    return password;\n  }\n}\n\nfunction getPayload(response, config) {\n  var payload = {\n    title: config.title,\n    raw: response,\n    category: config.publish.category\n  };\n\n  if (config.publish.topic) {\n    payload['topic_id'] = config.publish.topic;\n  }\n\n  var payload_json = JSON.stringify(payload); // window.console.log(payload);\n  // window.console.log(payload_json)\n\n  return payload_json;\n}\n\nfunction createTopic(response, json, messages, config) {\n  // window.console.log(json);\n  var apiKey = json.api_keys[0].key; // window.console.log(apiKey);\n\n  fetch(process.env.VUE_APP_DISCOURSE_TOPIC_URL, {\n    method: 'post',\n    headers: {\n      'Api-Key': apiKey,\n      'Content-Type': 'application/json'\n    },\n    body: getPayload(response, config)\n  }).then(handleResponse(messages), handleNetworkError(messages));\n}\n\nvar handleResponse = function handleResponse(messages) {\n  return function (response) {\n    return response.ok ? response.json() : response.json().then(function (_ref) {\n      var errors = _ref.errors;\n      return Promise.reject(Object.keys(errors).map(function (key) {\n        return messages[key] || messages.default;\n      }));\n    });\n  };\n};\n\nvar handleNetworkError = function handleNetworkError(messages) {\n  return function () {\n    return Promise.reject([messages.networkError]);\n  };\n};\n\nexport default (function (form, response, messages, config) {\n  return createUser(form, process.env.VUE_APP_DISCOURSE_AUTH_KEY, messages).then(function (json) {\n    return createTopic(response, json, messages, config);\n  });\n});",{"version":3,"sources":["/Users/user/Desktop/form/src/helpers/discourse.js"],"names":["generatePassword","errorMessages","createUser","form","authKey","messages","fetch","process","env","VUE_APP_DISCOURSE_USER_URL","Object","entries","accepted_gtc","accepted_privacy_policy","edgeryders_research_consent","requested_api_keys","VUE_APP_DISCOURSE_DOMAIN","auth_key","email","account","username","password","createPassword","map","pair","encodeURIComponent","join","then","handleResponse","handleNetworkError","length","getPayload","response","config","payload","title","raw","category","publish","topic","payload_json","JSON","stringify","createTopic","json","apiKey","api_keys","key","VUE_APP_DISCOURSE_TOPIC_URL","method","headers","body","ok","errors","Promise","reject","keys","default","networkError","VUE_APP_DISCOURSE_AUTH_KEY"],"mappings":"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","sourcesContent":["import generatePassword from 'secure-random-string'\n\nconst errorMessages = {\n    \"networkError\": \"Sorry, we were unable to store your response due to a network connectivity issue. Please try clicking on \\\"Send\\\" again.\",\n    \"username\": \"It seems somebody has already chosen your preferred username / nickname. Please enter a different one and click again on \\\"Send\\\".\",\n    \"email\": \"It seems you already have an account on our forum using this e-mail address, or have entered an invalid address. Please choose a different e-mail address and click again on \\\"Send\\\".\",\n    \"default\": \"Sorry, we were unable to store your response due to an unknown error. Please try clicking on \\\"Send\\\" again.\"\n  }\n\nconst createUser = (form, authKey, messages) => (\n  fetch(`${process.env.VUE_APP_DISCOURSE_USER_URL}?${Object.entries({\n    accepted_gtc: true,\n    accepted_privacy_policy: true,\n    edgeryders_research_consent: true,\n    requested_api_keys: [process.env.VUE_APP_DISCOURSE_DOMAIN],\n    auth_key: authKey,\n    email: form.account.email,\n    username: form.account.username,\n    password: createPassword(form)\n  }).map(pair => pair.map(encodeURIComponent).join('=')).join('&')}`)\n    .then(handleResponse(errorMessages), handleNetworkError(errorMessages))\n)\n\nfunction createPassword(form) {\n  if (form.account.password !== '') {\n    return form.account.password \n  } else {\n    var password = generatePassword({ length: 15 });\n    // window.console.log(password);\n    return password\n  }\n}\n\nfunction getPayload(response, config) {\n  var payload = {\n      title: config.title,\n      raw: response,\n      category: config.publish.category\n    };\n  if (config.publish.topic) {\n    payload['topic_id'] = config.publish.topic\n  }\n  var payload_json = JSON.stringify(payload);\n  // window.console.log(payload);\n  // window.console.log(payload_json)\n  return payload_json\n}\n\nfunction createTopic(response, json, messages, config) {\n  // window.console.log(json);\n  var apiKey = json.api_keys[0].key;\n  // window.console.log(apiKey);\n  fetch(process.env.VUE_APP_DISCOURSE_TOPIC_URL, {\n    method: 'post',\n    headers: { 'Api-Key': apiKey, 'Content-Type': 'application/json' },\n    body: getPayload(response, config)\n  }).then(handleResponse(messages), handleNetworkError(messages))\n}\n\nconst handleResponse = messages => (\n  response => (\n    response.ok\n      ? response.json()\n      : response.json().then(({ errors }) => (\n        Promise.reject(Object.keys(errors).map(key => (\n          messages[key] || messages.default\n        )))\n      )\n    )\n  )\n)\n\nconst handleNetworkError = messages => (\n  () => Promise.reject([messages.networkError])\n)\n\nexport default (form, response, messages, config) => (\n  createUser(form, process.env.VUE_APP_DISCOURSE_AUTH_KEY, messages).then(json => (\n    createTopic(response, json, messages, config)\n  ))\n)\n"]}]}